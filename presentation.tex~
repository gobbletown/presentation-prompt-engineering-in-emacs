% Created 2021-03-02 Tue 13:23
% Intended LaTeX compiler: pdflatex
\documentclass[presentation]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usetheme[height=20pt]{Rochester}
\author{Shane Mulligan \\  }
\date{\textit{<2021-03-01 Mon>}}
\title{Presenting\ldots{} \\   \emph{\alert{Prompt Engineering in Emacs}} \\  }
\hypersetup{
 pdfauthor={Shane Mulligan \\  },
 pdftitle={Presenting\ldots{} \\   \emph{\alert{Prompt Engineering in Emacs}} \\  },
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 27.0.91 (Org mode 9.3)}, 
 pdflang={English}}
\begin{document}

\maketitle

\section{Presentation}
\label{sec:org89032a9}
\begin{frame}[label={sec:org0562c2b},fragile]{Following along}
 \begin{block}{Repositories for following along}
{\footnotesize
\begin{center}
\begin{tabular}{l}
github1s.com/mullikine/presentation-prompt-engineering-in-emacs\\
github1s.com/semiosis/examplary\\
github1s.com/semiosis/pen.el\\
github1s.com/semiosis/prompts\\
github1s.com/semiosis/prompt-engineering-patterns\\
github1s.com/minimaxir/gpt-3-client\\
\\
\end{tabular}
\end{center}
}
\end{block}

\begin{block}{Demo}
{\footnotesize
\begin{verbatim}
1  ssh -oBatchMode=no shane@124.197.60.232 -p 9922
\end{verbatim}
}
\end{block}
\end{frame}

\section{Preliminaries}
\label{sec:org869e3da}
\subsection{GPT-3}
\label{sec:org940a07f}
\begin{frame}[label={sec:org76fef22},fragile]{Text Generator}
 \begin{block}{Background knowledge}
{\footnotesize
\begin{itemize}
\item \texttt{GPT-3} is a \texttt{seq2seq} model (a text generator)
\begin{itemize}
\item It's stochastic but can be configured to be deterministic.
\end{itemize}
\end{itemize}
}
\end{block}

\begin{block}{Key concepts}
{\footnotesize
\begin{itemize}
\item prompt,
\item completion, and
\item tokens
\end{itemize}
}
\end{block}

\begin{block}{Limitations}
{\footnotesize
Combined, the text prompt and generated
completion must be below 2048 tokens (roughly
\textasciitilde{}1500 words).

\begin{description}
\item[{context-stuffing}] With only 2048 tokens, you need to make
use of your real estate by providing
instructions and making implicit
information explicit.
\end{description}
}
\end{block}
\end{frame}

\subsection{A new programming paradigm}
\label{sec:org2882506}
\begin{frame}[label={sec:org9716109},fragile]{Prompt Engineering}
 \begin{block}{Characteristics}
{\footnotesize
\begin{itemize}
\item declarative, like \texttt{html}
\item stochastic, like \texttt{problog}
\item Unlocks new types of applications
\item Speeds up development
\end{itemize}
}
\end{block}
\end{frame}

\section{\texttt{semiosis}}
\label{sec:org00922c0}
\subsection{\texttt{pen.el}}
\label{sec:orgbe1213f}
\begin{frame}[label={sec:org99f25d2},fragile]{\texttt{Prompts as functions}}
\end{frame}

\subsection{\texttt{examplary}}
\label{sec:orge40a753}

\section{Demonstrations}
\label{sec:orgc98ce29}
\subsection{Using \texttt{pen.el}}
\label{sec:orgec06e45}
\begin{frame}[label={sec:org5574bdc},fragile]{Some prompts I've made}
 \begin{block}{\texttt{generate-vim-command.prompt}}
{\footnotesize
\begin{verbatim}
 1  Vim
 2  
 3  Insert "Q: " at the start of the line
 4  :%s/^/Q: /g.
 5  ###
 6  Remove whitespace from the start of each line
 7  :%s/^\s*/\1/g
 8  ###
 9  Join each line with the next line
10  :1,$j
11  ###
12  Make all occurrences of Steve lowercase
13  :%s/Steve/steve/g
14  ###
15  <1>
\end{verbatim}
}
\end{block}
\end{frame}

\begin{frame}[label={sec:orgd5db367}]{Create a prompt}
\begin{block}{Ask the audience}
\end{block}
\end{frame}

\section{Appendix}
\label{sec:orgcd5e7b2}
\subsection{Additional reading}
\label{sec:org9c9efed}
\begin{frame}[label={sec:orgc600169}]{Tutorials}
{\footnotesize
\url{https://www.twilio.com/blog/generating-cooking-recipes-openai-gpt3-ruby}
}
\end{frame}
\end{document}
