% Created 2021-03-02 Tue 12:23
% Intended LaTeX compiler: pdflatex
\documentclass[presentation]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usetheme[height=20pt]{Rochester}
\author{Shane Mulligan \\  }
\date{\textit{<2021-03-01 Mon>}}
\title{Presenting\ldots{} \\   \emph{\alert{Prompt Engineering in Emacs}} \\  }
\hypersetup{
 pdfauthor={Shane Mulligan \\  },
 pdftitle={Presenting\ldots{} \\   \emph{\alert{Prompt Engineering in Emacs}} \\  },
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 27.0.91 (Org mode 9.3)}, 
 pdflang={English}}
\begin{document}

\maketitle

\section{Presentation}
\label{sec:orga68f6c0}
\begin{frame}[label={sec:org4c9d805},fragile]{Following along}
 \begin{block}{Repositories for following along}
{\footnotesize
\begin{center}
\begin{tabular}{l}
github1s.com/mullikine/presentation-prompt-engineering-in-emacs\\
github1s.com/semiosis/examplary\\
github1s.com/semiosis/pen.el\\
github1s.com/semiosis/prompts\\
github1s.com/semiosis/prompt-engineering-patterns\\
\end{tabular}
\end{center}
}
\end{block}

\begin{block}{Demo}
\begin{verbatim}
1  ssh -oBatchMode=no shane@124.197.60.232 -p 9922
\end{verbatim}
\end{block}
\end{frame}

\section{Preliminaries}
\label{sec:org50658b9}
\subsection{GPT-3}
\label{sec:orge757ef9}
\begin{frame}[label={sec:org1b35454},fragile]{Text Generator}
 \begin{block}{Background knowledge}
\begin{itemize}
\item \texttt{GPT-3} is a \texttt{seq2seq} model
A text generator.
\begin{itemize}
\item It's stochastic
but configurable to be deterministic.
\end{itemize}
\end{itemize}
\end{block}

\begin{block}{Key concepts}
\begin{itemize}
\item prompt,
\item completion, and
\item tokens
\end{itemize}
\end{block}

\begin{block}{Limitations}
Combined, the text prompt and generated
completion must be below 2048 tokens (roughly
\textasciitilde{}1500 words).

\begin{verbatim}
1  context-stuffing
2      [#prompt engineering]
3  
4      With only 2048 tokens, you need to make
5      use of your real estate by providing
6      instructions and making implicit
7      information explicit.
\end{verbatim}
\end{block}
\end{frame}

\subsection{A new programming paradigm}
\label{sec:orga1b63b0}
\begin{itemize}
\item declarative
\begin{itemize}
\item Like html
\end{itemize}
\item stochastic
\begin{itemize}
\item Like problog
\end{itemize}
\item Unlocks new types of applications
\end{itemize}

\begin{quote}
"Probabilistic and information theoretic methods are used to make results better anyway.
Compromises are made anyway. Query reformulation, drift, etc.
So it is just a natural progression to use NNs for some of these components? Am I right." -- A quote from myself.
\end{quote}

\subsection{}
\label{sec:org9e614b8}
\end{document}
